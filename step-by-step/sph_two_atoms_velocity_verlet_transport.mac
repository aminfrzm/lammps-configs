kill(all);
m0     : 1;
rho0  : 1;
cutoff: 1;
soundspeed: 1;
viscosity: [1, 1];
pb       : 0.0;

h: cutoff;

/* normalization constant for Lucy kernel in 3D */
s:  16*%pi/105$

/* Eq. (29) */
vabs(dr):= sqrt(dr.dr);
w_scalar(r):= 1/''s * (1+3*r/h)*(1-r/h)^3 * charfun(r<=h);
block([x], gradef(charfun(x), 0));

dw_scalar(dr):= block([r: vabs(dr)], ''(diff(w_scalar(r), r)));
w(dr):= block([r: vabs(dr)], ''(w_scalar(r)));
dw(dr):= block([r: vabs(dr)], dr/r * ''(diff(w_scalar(r), r)));

/* Eq. (28) */
c0: soundspeed;
P_fun(rho):= ''( (c0^2*rho0) * ( ('rho/rho0) - 1) );

x: [[5, 5, 5], [5.5, 5, 5]];
v: [[0, 0, 0], [1,   0, 0]];
m: [m0, m0];
rho: [1, 2];
P: maplist('P_fun, rho);

sph_force_loop(expr)::= buildq([expr, n: length(x)], create_list(
    sum(if i#j then expr else 0, j, 1, n),
    i, 1, n));
pair_sph_taitwater_morris(x, v, rho):= block([Fc, Fd, P, drho, numer: true],
  P : maplist('P_fun, rho),
  Fc: sph_force_loop(-m[i]*m[j] * (P[i]/rho[i]^2 + P[j]/rho[j]^2) * dw(x[i] - x[j])),
  Fd: sph_force_loop(m[i]*m[j] * (viscosity[i] + viscosity[j])/(rho[i]*rho[j]) * (v[i] - v[j])*dw_scalar(x[i]-x[j]) / vabs(x[i]-x[j])),
  drho: sph_force_loop(m[j]*(v[i]-v[j]).dw(x[i] - x[j])),
  [Fc + Fd, drho]);

sph_velocity_verlet_step(x0, v0, rho0, f0, drho0):=
block([numer: true, ftm2v, dtv, dtfm, dtv,
  x: copylist(x0), v: copylist(v0),
  rho: copylist(rho0), f: copylist(f0), drho: copylist(drho0)
  ],
  
  ftm2v: 1,
  dtv: dt,
  dtf: 1/2*dt*ftm2v,
  dtfm: dtf/m,

  rho : rho + dtf*drho,
  v   : v + dtfm*f,
  x   : x + dtv*v, /* + dtv * dtfm * fb,*/
  [f, drho]: pair_sph_taitwater_morris(x, v, rho),

  v   : v + dtfm*f,
  rho : rho + dtf*drho,
  [x, v, rho, f, drho]);

dt: 0.02;
[f, drho]: pair_sph_taitwater_morris(x, v, rho);

thru 1 do [x, v, rho, f, drho]: sph_velocity_verlet_step(x, v, rho, f, drho);
[f[1][1],  x[1][1], v[1][1]];
  

